
==================== FINAL INTERFACE ====================
2018-12-23 19:28:16.5937423 UTC

interface main:Rcheck.Logic 8044
  interface hash: dd43315f88b377ca1df36f65a2467c74
  ABI hash: 86dd86fec523e20b52a2ebbb35b0585e
  export-list hash: 41fdbb7f956cf64407209a9aafbbac9e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a1cdb90a64bc02fd09371374f3f78a24
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Rcheck.Logic.require
  Rcheck.Logic.solve
  Rcheck.Logic.solveNeg
  Rcheck.Logic.solvePred
  Rcheck.Logic.Cond{Rcheck.Logic.And Rcheck.Logic.Imply Rcheck.Logic.Not Rcheck.Logic.Or Rcheck.Logic.Pred Rcheck.Logic.Unify}
module dependencies: Rcheck.BrMonad Rcheck.Solver
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Set.Internal
import  -/  base-4.11.1.0:Data.List cb78ca5eace70fd310936fda86b3e611
import  -/  base-4.11.1.0:Data.OldList 3987872d5de68d40c22cd1c30825ad08
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  Rcheck.BrMonad 8e90abdc1a4a799c3a6fcf1c55375145
  exports: 8cc780bb56fddbf32ab5dabaae26a071
  Br 96a605991104d8254cd6ca63879be779
  getBy 8cc8ee9b2e45890363f9e380bfb586b1
  putBy 9f697253f5f6a5105b0b901d8eee3abc
  reset 3487accaef8a100bfa458659abd062fa
  union 011d91dba996272ebd60937b54bb4fb4
import  -/  Rcheck.Solver 9a33f437f6e2bd1987a853b0bb3e8e89
  exports: 107901bb74093ade186dca8b27ec155f
  Complement 13e9fbc8f02c972f9cce387c51539b85
  EnumSet 8e657ed5042ab16c7bdb42ecf64e430e
  LState 23e909c1edeeb7c95c204c45b9155ab5
  Unify cfbea0a234bb5ac855cd1c2fd4c33c0f
  complement 9d3242501349e221962ffec79e392729
  constrains 23e909c1edeeb7c95c204c45b9155ab5
  constrains' 8f323e06044d103ff486ebb345b665b0
  load 43091774344601ff0908ed65db7e998d
  mkRef 114994d986070cc5e342766a591393cd
  negPairs 23e909c1edeeb7c95c204c45b9155ab5
  negUnify d84f5b4ea41748e24910d7328d199ab4
  prune 39bfd246c8b5d8b254f02919060cf129
  toEnumerable 514221a9e7ab9cd55b7f88054296bbdb
  unify baa765c69095abc6e53ef47327a9aaf7
9a317e48649c32d46b2aa31707a0789f
  $tc'And :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12889735760378401593##
                   917331249411880463##
                   Rcheck.Logic.$trModule
                   Rcheck.Logic.$tc'And2
                   1#
                   Rcheck.Logic.$tc'And1) -}
158301835fe8d807cf55c027776c77fe
  $tc'And1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c75fd57160db0152dd237144a7aa079d
  $tc'And2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Rcheck.Logic.$tc'And3) -}
275d5ff7b2e65630045320d151b4a90a
  $tc'And3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'And"#) -}
42b0c9c0654ed70e139d4490630b47a3
  $tc'Imply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9540122722727910612##
                   12282716021039911506##
                   Rcheck.Logic.$trModule
                   Rcheck.Logic.$tc'Imply1
                   1#
                   Rcheck.Logic.$tc'And1) -}
5791e59630a29a928cc1e4a6f142f990
  $tc'Imply1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Rcheck.Logic.$tc'Imply2) -}
1741bf9a3ff734a00dc5e47fe9baf911
  $tc'Imply2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Imply"#) -}
356fc22d2db3e613642a7350eebd451b
  $tc'Not :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   349315012971300605##
                   7369442843234545147##
                   Rcheck.Logic.$trModule
                   Rcheck.Logic.$tc'Not2
                   1#
                   Rcheck.Logic.$tc'Not1) -}
c97c822c60027eff0babfc6aa7c2facf
  $tc'Not1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2e3c247e1e8840b119355d4c13874240
  $tc'Not2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Rcheck.Logic.$tc'Not3) -}
5cd9be3e363780348f3d76bc6ef62ae0
  $tc'Not3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Not"#) -}
e2b3650b957e540e9ca8a9115307f057
  $tc'Or :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13856783627377394685##
                   7334451088607297033##
                   Rcheck.Logic.$trModule
                   Rcheck.Logic.$tc'Or1
                   1#
                   Rcheck.Logic.$tc'And1) -}
9431334180747add8118b3641268fb0b
  $tc'Or1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Rcheck.Logic.$tc'Or2) -}
8234dc0ff4269726542f914514348eec
  $tc'Or2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Or"#) -}
d30157b02eb99b4e50d885d8b66b0ddd
  $tc'Pred :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5707903328851119675##
                   7399632465158308642##
                   Rcheck.Logic.$trModule
                   Rcheck.Logic.$tc'Pred2
                   1#
                   Rcheck.Logic.$tc'Pred1) -}
597c63caba2f6b61ff80fe2f40aa3046
  $tc'Pred1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7b4f3c4ae4bce3dd00c091db957e0217
  $tc'Pred2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Rcheck.Logic.$tc'Pred3) -}
9ec5741357ddeebca6155b2aaf39afa3
  $tc'Pred3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Pred"#) -}
ec66ba5bbe3bac3de2be46147f77a7a0
  $tc'Unify :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9843093894822987642##
                   1538717878405834099##
                   Rcheck.Logic.$trModule
                   Rcheck.Logic.$tc'Unify2
                   1#
                   Rcheck.Logic.$tc'Unify1) -}
a79fd033634186fbdb341d6c6753620a
  $tc'Unify1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dbe5ede477a9bf2a282e0ae441e6e7c0
  $tc'Unify2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Rcheck.Logic.$tc'Unify3) -}
63cc769c5c45b4adf019b14dbb0ce464
  $tc'Unify3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Unify"#) -}
e1af6fe383bdfbb0af25fbea3d888aa9
  $tcCond :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1102663368148313083##
                   6365602292945396953##
                   Rcheck.Logic.$trModule
                   Rcheck.Logic.$tcCond1
                   0#
                   GHC.Types.krep$*Arr*) -}
5d14cb6656503f0a69a59030e800e71e
  $tcCond1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Rcheck.Logic.$tcCond2) -}
fde78d52a109683fe15ea06fa3b254bb
  $tcCond2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cond"#) -}
3fc24820296eb3a08574a41cf465b8e7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Rcheck.Logic.$trModule3
                   Rcheck.Logic.$trModule1) -}
8cf329ebc1f274c50ac990e1bbc26265
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Rcheck.Logic.$trModule2) -}
a9c9aa2db81d36c3b87319178ea5c575
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rcheck.Logic"#) -}
31480c74a06f9dcbdc6d0123e35af10a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Rcheck.Logic.$trModule4) -}
18d828526e2f4ac32b4616bfd8ccaafb
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
da0602bddd30dc173350587de65a2aea
  $wsolveNeg ::
    Rcheck.Solver.Complement a =>
    (# Rcheck.Solver.LState a -> [((), Rcheck.Solver.LState a)] #)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(A,1*U(A,C(U)),C(U(C(U))),A),C(C1(U(C(U)))))>,
     Inline: [0] -}
96108f28e7e93012fdcdc5a09604f80b
  type role Cond nominal
  data Cond a where
    Unify :: Rcheck.Solver.Unify a => a -> a -> Cond a
    Not :: (Rcheck.Logic.Cond a) -> Cond a
    Pred :: (Rcheck.BrMonad.Br (Rcheck.Solver.LState a) GHC.Types.Bool)
            -> Cond a
    Or :: (Rcheck.Logic.Cond a) -> (Rcheck.Logic.Cond a) -> Cond a
    And :: (Rcheck.Logic.Cond a) -> (Rcheck.Logic.Cond a) -> Cond a
    Imply :: (Rcheck.Logic.Cond a) -> (Rcheck.Logic.Cond a) -> Cond a
b03477c4a21ed3dc9773fc77ff1f5cf3
  require ::
    Rcheck.Solver.Unify a =>
    a -> Rcheck.BrMonad.Br (Rcheck.Solver.LState a) a
  {- Arity: 2, Strictness: <L,1*U(A,A,1*C1(U(C(U))),A)><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: Rcheck.Solver.Unify a) (w1 :: a) ->
                 let {
                   w2 :: Rcheck.BrMonad.Br (Rcheck.Solver.LState a) Rcheck.Solver.Addr
                   = Rcheck.Solver.prune @ a w w1
                 } in
                 Rcheck.BrMonad.Br
                   @ (Rcheck.Solver.LState a)
                   @ a
                   (\ (s1 :: Rcheck.Solver.LState a) ->
                    case w2 of wild { Rcheck.BrMonad.Br ds ->
                    Rcheck.Logic.require1 @ a (ds s1) })) -}
88ac4952c887f5c43da2aadca345dafc
  require1 ::
    [(Rcheck.Solver.Addr, Rcheck.Solver.LState a)]
    -> [(a, Rcheck.Solver.LState a)]
  {- Arity: 1, Strictness: <S,1*U> -}
ca4f770c17d948ba24ea5da9c789b303
  solve ::
    Rcheck.Logic.Cond a
    -> Rcheck.BrMonad.Br (Rcheck.Solver.LState a) ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
550f91462ab2eab78b49d061cbfc7c49
  solveNeg ::
    Rcheck.Solver.Complement a =>
    Rcheck.BrMonad.Br (Rcheck.Solver.LState a) ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(U(A,U(A,C(U)),C(U(C(U))),A),C(C1(U(C(U)))))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Rcheck.Solver.Complement a) ->
                 case Rcheck.Logic.$wsolveNeg @ a w of ww { Unit# ww1 ->
                 Rcheck.BrMonad.Br @ (Rcheck.Solver.LState a) @ () ww1 }) -}
91548779cae33d4a4a1176cfec9bf7ac
  solvePred ::
    Rcheck.Solver.EnumSet a =>
    Rcheck.BrMonad.Br (Rcheck.Solver.LState a) ()
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(U))>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: Rcheck.Solver.EnumSet a) ->
                 Rcheck.BrMonad.Br
                   @ (Rcheck.Solver.LState a)
                   @ ()
                   (\ (s1 :: Rcheck.Solver.LState a) ->
                    case w `cast`
                         (Rcheck.Solver.N:EnumSet[0]
                              <a>_N) of wild { Rcheck.BrMonad.Br ds ->
                    Rcheck.Logic.solvePred1 @ a (ds s1) })) -}
0ce73204fe829426c4654ab71a840703
  solvePred1 ::
    [((), Rcheck.Solver.LState a)] -> [((), Rcheck.Solver.LState a)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

